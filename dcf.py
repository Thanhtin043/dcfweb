import streamlit as st
from vnstock import Vnstock, Listing
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from IPython.display import display
import ta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import scipy.stats as stats

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang
st.set_page_config(page_title="Ph√¢n T√≠ch C·ªï Phi·∫øu Vi·ªát Nam", layout="wide")

# T·∫°o ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üìä Ph√¢n T√≠ch C·ªï Phi·∫øu Vi·ªát Nam")

# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
st.markdown("""
·ª®ng d·ª•ng n√†y cho ph√©p b·∫°n:
1. Xem d·ªØ li·ªáu t√†i ch√≠nh v√† gi√° l·ªãch s·ª≠ c·ªßa c·ªï phi·∫øu
2. Th·ª±c hi·ªán ph√¢n t√≠ch DCF Monte Carlo ƒë·ªÉ ƒë·ªãnh gi√° c·ªï phi·∫øu
""")

# L·∫•y danh s√°ch m√£ c·ªï phi·∫øu HOSE
listing = Listing()
symbols = listing.symbols_by_group('HOSE')

# T·∫°o sidebar cho nh·∫≠p li·ªáu
with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    
    # Nh·∫≠p m√£ c·ªï phi·∫øu
    symbol_input = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu").strip()
    symbol_valid = next((s for s in symbols if s.lower() == symbol_input.lower()), None)

    if symbol_input and not symbol_valid:
        st.error("‚ö†Ô∏è M√£ c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m√£ thu·ªôc s√†n HOSE.")
        st.stop()

    symbol = symbol_valid if symbol_valid else symbols[0]

    # Ch·ªçn lo·∫°i ph√¢n t√≠ch
    analysis_type = st.radio(
        "Lo·∫°i ph√¢n t√≠ch",
        ["D·ªØ li·ªáu t√†i ch√≠nh", "Gi√° l·ªãch s·ª≠", "ƒê·ªãnh gi√° DCF Monte Carlo"],
        index=0
    )
    
    if analysis_type == "D·ªØ li·ªáu t√†i ch√≠nh":
        period = st.selectbox("Chu k·ª≥ b√°o c√°o", options=['year', 'quarter'], index=0)
        lang = st.selectbox("Ng√¥n ng·ªØ", options=['vi', 'en'], index=0)
    elif analysis_type == "Gi√° l·ªãch s·ª≠":
        # Thi·∫øt l·∫≠p ng√†y cho d·ªØ li·ªáu gi√°
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input(
                "T·ª´ ng√†y",
                value=datetime.now() - timedelta(days=30),
                max_value=datetime.now()
            )
        with col2:
            end_date = st.date_input(
                "ƒê·∫øn ng√†y",
                value=datetime.now(),
                max_value=datetime.now()
            )
        
        interval = st.selectbox(
            "Khung th·ªùi gian",
            options=['1m', '5m', '15m', '30m', '1H', '1D', '1W', '1M'],
            index=5
        )
    else:
        # Thi·∫øt l·∫≠p tham s·ªë cho DCF Monte Carlo
        st.subheader("Tham s·ªë ƒë·ªãnh gi√°")
        
        # T·∫°o 2 c·ªôt cho c√°c tham s·ªë
        col1, col2 = st.columns(2)
        
        with col1:
            wacc = st.number_input("WACC (%)", min_value=0.0, max_value=100.0, value=15.0, step=0.1) / 100
            num_simulations = st.number_input("S·ªë l·∫ßn m√¥ ph·ªèng", min_value=1000, max_value=50000, value=10000, step=1000)
        
        with col2:
            terminal_growth = st.number_input("T·ª∑ l·ªá tƒÉng tr∆∞·ªüng d√†i h·∫°n (%)", min_value=0.0, max_value=10.0, value=2.0, step=0.1) / 100
            forecast_years = st.number_input("S·ªë nƒÉm d·ª± ph√≥ng", min_value=5, max_value=10, value=6, step=1)
        
        st.markdown("---")
        st.markdown("**L∆∞u √Ω:** S·ªë nƒÉm d·ª± ph√≥ng c√†ng d√†i, ƒë·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh c√†ng th·∫•p do ƒë·ªô b·∫•t ƒë·ªãnh tƒÉng theo th·ªùi gian.")
    
   # H√†m x·ª≠ l√Ω d·ªØ li·ªáu
def clean_data(df):
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(-1)
    
    if df.columns.duplicated().any():
        columns = df.columns
        seen = {}
        new_columns = []
        for col in columns:
            if col in seen:
                seen[col] += 1
                new_col = f"{col}_{seen[col]}"
            else:
                seen[col] = 1
                new_col = col
            new_columns.append(new_col)
        df.columns = new_columns
    
    return df

# Class DCF Monte Carlo
class StockDCFMonteCarlo:
    def __init__(self, kqkd_data, lctt_data, cdkt_data, cstc_data, wacc, terminal_growth, num_simulations=10000, forecast_years=6):
        # L·ªçc d·ªØ li·ªáu t·ª´ nƒÉm 2020
        self.kqkd = kqkd_data[kqkd_data['NƒÉm'] >= 2020].sort_values('NƒÉm').copy()
        self.lctt = lctt_data[lctt_data['NƒÉm'] >= 2020].sort_values('NƒÉm').copy()
        self.cdkt = cdkt_data[cdkt_data['NƒÉm'] >= 2020].sort_values('NƒÉm').copy()
        self.cstc = cstc_data[cstc_data['NƒÉm'] >= 2020].sort_values('NƒÉm').copy()
        
        self.wacc = wacc
        self.terminal_growth = terminal_growth
        self.num_simulations = num_simulations
        self.forecast_years = forecast_years
        
        self.calculate_historical_ratios()
    
    def calculate_historical_ratios(self):
        """T√≠nh to√°n t·ª∑ l·ªá l·ªãch s·ª≠ v√† th·ªëng k√™ c·ªßa ch√∫ng"""
        # T·ª∑ l·ªá tƒÉng tr∆∞·ªüng doanh thu thu·∫ßn
        self.revenue_growth = []
        for i in range(1, len(self.kqkd)):
            growth = (self.kqkd['Doanh thu thu·∫ßn'].iloc[i] - self.kqkd['Doanh thu thu·∫ßn'].iloc[i-1]) / self.kqkd['Doanh thu thu·∫ßn'].iloc[i-1]
            self.revenue_growth.append(growth)
        
        self.revenue_growth = pd.Series(self.revenue_growth)
        self.revenue_growth_mean = self.revenue_growth.mean()
        self.revenue_growth_std = self.revenue_growth.std()
        self.revenue_growth_min = self.revenue_growth.min()
        self.revenue_growth_max = self.revenue_growth.max()
        
        # Bi√™n l·ª£i nhu·∫≠n ho·∫°t ƒë·ªông
        self.operating_margin = self.kqkd['L√£i/L·ªó t·ª´ ho·∫°t ƒë·ªông kinh doanh'] / self.kqkd['Doanh thu thu·∫ßn']
        self.operating_margin_mean = self.operating_margin.mean()
        self.operating_margin_std = self.operating_margin.std()
        self.operating_margin_min = self.operating_margin.min()
        self.operating_margin_max = self.operating_margin.max()
        
        # T·ª∑ l·ªá thu·∫ø
        tax_current = self.kqkd['Chi ph√≠ thu·∫ø TNDN hi·ªán h√†nh']
        tax_deferred = self.kqkd['Chi ph√≠ thu·∫ø TNDN ho√£n l·∫°i']
        total_tax = tax_current + tax_deferred
        self.tax_rate = abs(total_tax) / abs(self.kqkd['L√£i/L·ªó t·ª´ ho·∫°t ƒë·ªông kinh doanh'])
        self.tax_rate_mean = self.tax_rate.mean()
        self.tax_rate_std = self.tax_rate.std()
        self.tax_rate_min = self.tax_rate.min()
        self.tax_rate_max = self.tax_rate.max()
        
        # T·ª∑ l·ªá kh·∫•u hao
        self.depreciation_rate = abs(self.lctt['Kh·∫•u hao TSCƒê']) / self.kqkd['Doanh thu thu·∫ßn']
        self.depreciation_rate_mean = self.depreciation_rate.mean()
        self.depreciation_rate_std = self.depreciation_rate.std()
        self.depreciation_rate_min = self.depreciation_rate.min()
        self.depreciation_rate_max = self.depreciation_rate.max()
        
        # T·ª∑ l·ªá Capex
        self.capex_rate_mean = 0.09
        self.capex_rate_std = 0.01
        self.capex_rate_min = 0.03
        self.capex_rate_max = 0.15
        
        # T·ª∑ l·ªá NWC
        self.nwc = self.cdkt['T√ÄI S·∫¢N NG·∫ÆN H·∫†N (ƒë·ªìng)'] - self.cdkt['N·ª£ ng·∫Øn h·∫°n (ƒë·ªìng)']
        self.nwc_change = self.nwc.diff()
        self.nwc_rate = self.nwc_change / self.kqkd['Doanh thu thu·∫ßn']
        self.nwc_rate = self.nwc_rate.dropna()
        
        self.nwc_rate_mean = self.nwc_rate.mean()
        self.nwc_rate_std = self.nwc_rate.std()
        self.nwc_rate_min = self.nwc_rate.min()
        self.nwc_rate_max = self.nwc_rate.max()

    def generate_forecast(self):
        """T·∫°o d·ª± b√°o cho m·ªôt m√¥ ph·ªèng"""
        latest_revenue = self.kqkd['Doanh thu thu·∫ßn'].iloc[-1]
        latest_nwc = self.nwc.iloc[-1]
        
        revenue_growth = np.random.normal(self.revenue_growth_mean, self.revenue_growth_std, self.forecast_years)
        operating_margins = np.random.normal(self.operating_margin_mean, self.operating_margin_std, self.forecast_years)
        tax_rates = np.random.normal(self.tax_rate_mean, self.tax_rate_std, self.forecast_years)
        depreciation_rates = np.random.normal(self.depreciation_rate_mean, self.depreciation_rate_std, self.forecast_years)
        capex_rates = np.random.normal(self.capex_rate_mean, self.capex_rate_std, self.forecast_years)
        nwc_rates = np.random.normal(self.nwc_rate_mean, self.nwc_rate_std, self.forecast_years)
        
        revenue_growth = np.clip(revenue_growth, self.revenue_growth_min, self.revenue_growth_max)
        operating_margins = np.clip(operating_margins, self.operating_margin_min, self.operating_margin_max)
        tax_rates = np.clip(tax_rates, self.tax_rate_min, self.tax_rate_max)
        depreciation_rates = np.clip(depreciation_rates, self.depreciation_rate_min, self.depreciation_rate_max)
        capex_rates = np.clip(capex_rates, self.capex_rate_min, self.capex_rate_max)
        nwc_rates = np.clip(nwc_rates, self.nwc_rate_min, self.nwc_rate_max)
        
        revenues = [latest_revenue]
        for growth in revenue_growth:
            revenues.append(revenues[-1] * (1 + growth))
        
        ebit = [rev * margin for rev, margin in zip(revenues[1:], operating_margins)]
        total_tax = [eb * tax for eb, tax in zip(ebit, tax_rates)]
        ebitat = [eb - abs(tax) for eb, tax in zip(ebit, total_tax)]
        
        depreciation = [rev * dep_rate for rev, dep_rate in zip(revenues[1:], depreciation_rates)]
        capex = [rev * cap_rate for rev, cap_rate in zip(revenues[1:], capex_rates)]
        nwc_changes = [rev * rate for rev, rate in zip(revenues[1:], nwc_rates)]
        
        fcf = [eb + dep - cap - nwc for eb, dep, cap, nwc in zip(ebitat, depreciation, capex, nwc_changes)]
        pv_fcf = [cf / (1 + self.wacc)**(i+1) for i, cf in enumerate(fcf)]
        
        terminal_value = fcf[-1] * (1 + self.terminal_growth) / (self.wacc - self.terminal_growth)
        pv_terminal = terminal_value / (1 + self.wacc)**self.forecast_years
        
        ev = sum(pv_fcf) + pv_terminal
        
        debt = (self.cdkt['Vay v√† n·ª£ thu√™ t√†i ch√≠nh d√†i h·∫°n (ƒë·ªìng)'].iloc[-1] + 
                self.cdkt['Vay v√† n·ª£ thu√™ t√†i ch√≠nh ng·∫Øn h·∫°n (ƒë·ªìng)'].iloc[-1])
        cash = self.cdkt['Ti·ªÅn v√† t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn (ƒë·ªìng)'].iloc[-1]
        equity_value = ev - debt + cash
        
        shares = self.cstc['S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)'].iloc[-1]
        stock_price = max(0, equity_value / shares)
        
        return {
            'years': list(range(2025, 2025 + self.forecast_years)),
            'revenues': revenues[1:],
            'revenue_growth': revenue_growth,
            'operating_margins': operating_margins,
            'tax_rates': tax_rates,
            'depreciation_rates': depreciation_rates,
            'capex_rates': capex_rates,
            'nwc_rates': nwc_rates,
            'ebit': ebit,
            'total_tax': total_tax,
            'ebitat': ebitat,
            'depreciation': depreciation,
            'capex': capex,
            'nwc_changes': nwc_changes,
            'fcf': fcf,
            'pv_fcf': pv_fcf,
            'terminal_value': terminal_value,
            'pv_terminal': pv_terminal,
            'enterprise_value': ev,
            'equity_value': equity_value,
            'stock_price': stock_price
        }
    
    def run_simulation(self):
        """Ch·∫°y m√¥ ph·ªèng Monte Carlo"""
        stock_prices = []
        forecast_details_list = []
        for _ in range(self.num_simulations):
            forecast_details = self.generate_forecast()
            if forecast_details['stock_price'] > 0:
                stock_prices.append(forecast_details['stock_price'])
                forecast_details_list.append(forecast_details)
        return stock_prices, forecast_details_list
    
    def create_historical_ratios_df(self):
        """T·∫°o DataFrame cho t·ª∑ l·ªá l·ªãch s·ª≠"""
        historical_data = {
            'T·ª∑ L·ªá': [
                'TƒÉng Tr∆∞·ªüng Doanh Thu Thu·∫ßn',
                'Bi√™n L·ª£i Nhu·∫≠n Ho·∫°t ƒê·ªông',
                'T·ª∑ L·ªá Thu·∫ø',
                'T·ª∑ L·ªá Kh·∫•u Hao',
                'T·ª∑ L·ªá Capex',
                'T·ª∑ L·ªá NWC'
            ],
            'Trung B√¨nh': [
                f"{self.revenue_growth_mean:.2%}",
                f"{self.operating_margin_mean:.2%}",
                f"{self.tax_rate_mean:.2%}",
                f"{self.depreciation_rate_mean:.2%}",
                f"{self.capex_rate_mean:.2%}",
                f"{self.nwc_rate_mean:.2%}"
            ],
            'T·ªëi Thi·ªÉu': [
                f"{self.revenue_growth_min:.2%}",
                f"{self.operating_margin_min:.2%}",
                f"{self.tax_rate_min:.2%}",
                f"{self.depreciation_rate_min:.2%}",
                f"{self.capex_rate_min:.2%}",
                f"{self.nwc_rate_min:.2%}"
            ],
            'T·ªëi ƒêa': [
                f"{self.revenue_growth_max:.2%}",
                f"{self.operating_margin_max:.2%}",
                f"{self.tax_rate_max:.2%}",
                f"{self.depreciation_rate_max:.2%}",
                f"{self.capex_rate_max:.2%}",
                f"{self.nwc_rate_max:.2%}"
            ]
        }
        return pd.DataFrame(historical_data)
    
    def create_valuation_statistics_df(self, stock_prices):
        """T·∫°o DataFrame cho th·ªëng k√™ ƒë·ªãnh gi√°"""
        mean_price = np.mean(stock_prices)
        ci_lower = np.percentile(stock_prices, 2.5)
        ci_upper = np.percentile(stock_prices, 97.5)
        
        stats_data = {
            'Gi√° C·ªï Phi·∫øu Trung B√¨nh (VND)': [f"{mean_price:,.2f}"],
            'Kho·∫£ng Tin C·∫≠y 95% Th·∫•p (VND)': [f"{ci_lower:,.2f}"],
            'Kho·∫£ng Tin C·∫≠y 95% Cao (VND)': [f"{ci_upper:,.2f}"],
            'ƒê·ªô L·ªách Chu·∫©n (VND)': [f"{np.std(stock_prices):,.2f}"]
        }
        return pd.DataFrame(stats_data)
    
    def create_forecast_df(self, forecast):
        """T·∫°o DataFrame cho d·ª± b√°o chi ti·∫øt"""
        forecast_data = []
        for i in range(self.forecast_years):
            year_data = {
                'NƒÉm': forecast['years'][i],
                'TƒÉng Tr∆∞·ªüng Doanh Thu Thu·∫ßn': f"{forecast['revenue_growth'][i]:.2%}",
                'Doanh Thu (VND)': f"{forecast['revenues'][i]:,.2f}",
                'Bi√™n L·ª£i Nhu·∫≠n Ho·∫°t ƒê·ªông': f"{forecast['operating_margins'][i]:.2%}",
                'EBIT (VND)': f"{forecast['ebit'][i]:,.2f}",
                'T·ª∑ L·ªá Thu·∫ø': f"{forecast['tax_rates'][i]:.2%}",
                'Thu·∫ø T·ªïng C·ªông (VND)': f"{forecast['total_tax'][i]:,.2f}",
                'EBIAT (VND)': f"{forecast['ebitat'][i]:,.2f}",
                'T·ª∑ L·ªá Kh·∫•u Hao': f"{forecast['depreciation_rates'][i]:.2%}",
                'Kh·∫•u Hao (VND)': f"{forecast['depreciation'][i]:,.2f}",
                'T·ª∑ L·ªá Capex': f"{forecast['capex_rates'][i]:.2%}",
                'Capex (VND)': f"{forecast['capex'][i]:,.2f}",
                'T·ª∑ L·ªá NWC': f"{forecast['nwc_rates'][i]:.2%}",
                'S·ª± Thay ƒê·ªïi NWC (VND)': f"{forecast['nwc_changes'][i]:,.2f}",
                'D√≤ng Ti·ªÅn T·ª± Do (VND)': f"{forecast['fcf'][i]:,.2f}",
                'Gi√° Tr·ªã Hi·ªán T·∫°i (VND)': f"{forecast['pv_fcf'][i]:,.2f}"
            }
            forecast_data.append(year_data)
        return pd.DataFrame(forecast_data)
    
    def create_final_values_df(self, forecast):
        """T·∫°o DataFrame cho gi√° tr·ªã cu·ªëi c√πng"""
        final_data = {
            'Gi√° Tr·ªã Cu·ªëi C√πng (VND)': [f"{forecast['terminal_value']:,.2f}"],
            'Gi√° Tr·ªã Hi·ªán T·∫°i Gi√° Tr·ªã Cu·ªëi C√πng (VND)': [f"{forecast['pv_terminal']:,.2f}"],
            'Gi√° Tr·ªã Doanh Nghi·ªáp (VND)': [f"{forecast['enterprise_value']:,.2f}"],
            'Gi√° Tr·ªã V·ªën Ch·ªß S·ªü H·ªØu (VND)': [f"{forecast['equity_value']:,.2f}"]
        }
        return pd.DataFrame(final_data)

# T·∫£i d·ªØ li·ªáu v√† hi·ªÉn th·ªã
try:
    if analysis_type == "Gi√° l·ªãch s·ª≠":
        # L·∫•y d·ªØ li·ªáu gi√° t·ª´ TCBS
        stock_data = Vnstock().stock(symbol=symbol, source='TCBS')
    else:
        # L·∫•y d·ªØ li·ªáu t√†i ch√≠nh t·ª´ VCI
        stock_data = Vnstock().stock(symbol=symbol, source='VCI')
    
    if analysis_type == "D·ªØ li·ªáu t√†i ch√≠nh":
        # T·∫°o tabs cho c√°c lo·∫°i b√°o c√°o
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìà Ch·ªâ S·ªë T√†i Ch√≠nh", 
            "üìä K·∫øt Qu·∫£ Kinh Doanh", 
            "üè¶ C√¢n ƒê·ªëi K·∫ø To√°n",
            "üí∞ L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá"
        ])
        
        with tab1:
            st.subheader(f"Ch·ªâ s·ªë t√†i ch√≠nh - {symbol}")
            cstc = stock_data.finance.ratio(period=period, lang=lang)
            cstc = clean_data(cstc)
            st.dataframe(cstc, use_container_width=True)
            
            st.download_button(
                label="T·∫£i xu·ªëng CSTC (CSV)",
                data=cstc.to_csv(index=False).encode('utf-8-sig'),
                file_name=f'CSTC_{symbol}_{period}.csv',
                mime='text/csv'
            )
        
        with tab2:
            st.subheader(f"K·∫øt qu·∫£ kinh doanh - {symbol}")
            kqkd = stock_data.finance.income_statement(period=period, lang=lang)
            kqkd = clean_data(kqkd)
            st.dataframe(kqkd, use_container_width=True)
            
            st.download_button(
                label="T·∫£i xu·ªëng KQKD (CSV)",
                data=kqkd.to_csv(index=False).encode('utf-8-sig'),
                file_name=f'KQKD_{symbol}_{period}.csv',
                mime='text/csv'
            )
        
        with tab3:
            st.subheader(f"C√¢n ƒë·ªëi k·∫ø to√°n - {symbol}")
            cdkt = stock_data.finance.balance_sheet(period=period, lang=lang)
            cdkt = clean_data(cdkt)
            st.dataframe(cdkt, use_container_width=True)
            
            st.download_button(
                label="T·∫£i xu·ªëng CDKT (CSV)",
                data=cdkt.to_csv(index=False).encode('utf-8-sig'),
                file_name=f'CDKT_{symbol}_{period}.csv',
                mime='text/csv'
            )

        with tab4:
            st.subheader(f"L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá - {symbol}")
            lctt = stock_data.finance.cash_flow(period=period, lang=lang)
            lctt = clean_data(lctt)
            st.dataframe(lctt, use_container_width=True)
            
            st.download_button(
                label="T·∫£i xu·ªëng LCTT (CSV)",
                data=lctt.to_csv(index=False).encode('utf-8-sig'),
                file_name=f'LCTT_{symbol}_{period}.csv',
                mime='text/csv'
            )
    
    elif analysis_type == "Gi√° l·ªãch s·ª≠":
        st.subheader(f"Gi√° l·ªãch s·ª≠ - {symbol}")
        
        # Chuy·ªÉn ƒë·ªïi ng√†y th√†nh chu·ªói
        start_str = start_date.strftime('%Y-%m-%d')
        end_str = end_date.strftime('%Y-%m-%d')
        
        # L·∫•y d·ªØ li·ªáu gi√°
        price_data = stock_data.quote.history(
            start=start_str,
            end=end_str,
            interval=interval
        )
        
        # T·∫°o tabs cho c√°c lo·∫°i bi·ªÉu ƒë·ªì
        chart_tab1, chart_tab2, chart_tab3 = st.tabs([
            "üìà Bi·ªÉu ƒê·ªì Gi√°",
            "üìä Ch·ªâ B√°o K·ªπ Thu·∫≠t",
            "üìâ Ph√¢n T√≠ch Xu H∆∞·ªõng"
        ])
        
        # Ch·ªçn c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        st.sidebar.markdown("### Ch·ªâ B√°o K·ªπ Thu·∫≠t")
        
        # T√πy ch·ªçn hi·ªÉn th·ªã gi√°
        price_display = st.sidebar.radio(
            "Hi·ªÉn th·ªã gi√°", 
            ["Bi·ªÉu ƒë·ªì n·∫øn", "Gi√° ƒë√≥ng c·ª≠a"],
            index=0
        )
        
        # T√πy ch·ªçn cho bi·ªÉu ƒë·ªì gi√°
        st.sidebar.markdown("#### Bi·ªÉu ƒê·ªì Gi√°")
        show_ma = st.sidebar.checkbox("ƒê∆∞·ªùng MA", value=True)
        if show_ma:
            ma20 = st.sidebar.checkbox("MA20", value=True)
            ma50 = st.sidebar.checkbox("MA50", value=True)
            ma100 = st.sidebar.checkbox("MA100", value=True)
        
        show_bb = st.sidebar.checkbox("Bollinger Bands", value=True)
        
        # T√πy ch·ªçn cho bi·ªÉu ƒë·ªì MACD
        st.sidebar.markdown("#### Bi·ªÉu ƒê·ªì MACD")
        show_macd = st.sidebar.checkbox("MACD", value=True)
        if show_macd:
            show_macd_line = st.sidebar.checkbox("MACD Line", value=True)
            show_signal_line = st.sidebar.checkbox("Signal Line", value=True)
            show_histogram = st.sidebar.checkbox("MACD Histogram", value=True)
        
        # T√πy ch·ªçn cho bi·ªÉu ƒë·ªì Stochastic
        st.sidebar.markdown("#### Bi·ªÉu ƒê·ªì Stochastic")
        show_stoch = st.sidebar.checkbox("Stochastic", value=True)
        if show_stoch:
            show_stoch_k = st.sidebar.checkbox("Stoch %K", value=True)
            show_stoch_d = st.sidebar.checkbox("Stoch %D", value=True)
        
        # T√≠nh to√°n c√°c ch·ªâ b√°o
        if not price_data.empty and 'close' in price_data.columns:
            with chart_tab1:
                # T·∫°o figure cho bi·ªÉu ƒë·ªì gi√°
                fig_price = go.Figure()
                
                # V·∫Ω gi√° theo t√πy ch·ªçn
                if price_display == "Bi·ªÉu ƒë·ªì n·∫øn":
                    fig_price.add_trace(go.Candlestick(
                        x=price_data['time'],
                        open=price_data['open'],
                        high=price_data['high'],
                        low=price_data['low'],
                        close=price_data['close'],
                        name='Gi√°',
                        increasing_line_color='#26a69a',
                        decreasing_line_color='#ef5350',
                        increasing_fillcolor='#26a69a',
                        decreasing_fillcolor='#ef5350'
                    ))
                else:
                    fig_price.add_trace(go.Scatter(
                        x=price_data['time'],
                        y=price_data['close'],
                        name='Gi√° ƒë√≥ng c·ª≠a',
                        line=dict(color='#2196F3', width=2)
                    ))
                
                # V·∫Ω c√°c ƒë∆∞·ªùng MA
                if show_ma:
                    if ma20:
                        ma20_data = ta.trend.sma_indicator(price_data['close'], window=20)
                        fig_price.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=ma20_data,
                            name='MA20',
                            line=dict(color='#FF9800', width=1)
                        ))
                    if ma50:
                        ma50_data = ta.trend.sma_indicator(price_data['close'], window=50)
                        fig_price.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=ma50_data,
                            name='MA50',
                            line=dict(color='#4CAF50', width=1)
                        ))
                    if ma100:
                        ma100_data = ta.trend.sma_indicator(price_data['close'], window=100)
                        fig_price.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=ma100_data,
                            name='MA100',
                            line=dict(color='#9C27B0', width=1)
                        ))
                
                # V·∫Ω Bollinger Bands
                if show_bb:
                    bb = ta.volatility.BollingerBands(price_data['close'])
                    fig_price.add_trace(go.Scatter(
                        x=price_data['time'],
                        y=bb.bollinger_hband(),
                        name='BB Upper',
                        line=dict(color='#90A4AE', dash='dash', width=1)
                    ))
                    fig_price.add_trace(go.Scatter(
                        x=price_data['time'],
                        y=bb.bollinger_lband(),
                        name='BB Lower',
                        line=dict(color='#90A4AE', dash='dash', width=1),
                        fill='tonexty'
                    ))
                    fig_price.add_trace(go.Scatter(
                        x=price_data['time'],
                        y=bb.bollinger_mavg(),
                        name='BB Middle',
                        line=dict(color='#90A4AE', width=1)
                    ))
                
                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì gi√°
                fig_price.update_layout(
                    title=f'Bi·ªÉu ƒê·ªì Gi√° {symbol}',
                    yaxis_title='Gi√° (VND)',
                    xaxis_rangeslider_visible=False,
                    height=600,
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    ),
                    template='plotly_white'
                )
                
                # Th√™m m·ªëc th·ªùi gian
                fig_price.update_xaxes(
                    rangeslider_visible=False,
                    rangeselector=dict(
                        buttons=list([
                            dict(count=1, label="1M", step="month", stepmode="backward"),
                            dict(count=3, label="3M", step="month", stepmode="backward"),
                            dict(count=6, label="6M", step="month", stepmode="backward"),
                            dict(count=1, label="1Y", step="year", stepmode="backward"),
                            dict(step="all", label="T·∫•t c·∫£")
                        ])
                    )
                )
                
                st.plotly_chart(fig_price, use_container_width=True)
            
            with chart_tab2:
                # T·∫°o figure cho bi·ªÉu ƒë·ªì MACD
                fig_macd = go.Figure()
                
                if show_macd:
                    macd = ta.trend.MACD(price_data['close'])
                    if show_macd_line:
                        fig_macd.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=macd.macd(),
                            name='MACD',
                            line=dict(color='#2196F3', width=2)
                        ))
                    if show_signal_line:
                        fig_macd.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=macd.macd_signal(),
                            name='Signal',
                            line=dict(color='#FF9800', width=2)
                        ))
                    if show_histogram:
                        fig_macd.add_trace(go.Bar(
                            x=price_data['time'],
                            y=macd.macd_diff(),
                            name='MACD Histogram',
                            marker_color='#90A4AE'
                        ))
                
                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì MACD
                fig_macd.update_layout(
                    title='MACD',
                    yaxis_title='MACD',
                    xaxis_rangeslider_visible=False,
                    height=400,
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    ),
                    template='plotly_white'
                )
                
                st.plotly_chart(fig_macd, use_container_width=True)
            
            with chart_tab3:
                # T·∫°o figure cho bi·ªÉu ƒë·ªì Stochastic
                fig_stoch = go.Figure()
                
                if show_stoch:
                    stoch = ta.momentum.StochasticOscillator(price_data['high'], price_data['low'], price_data['close'])
                    if show_stoch_k:
                        fig_stoch.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=stoch.stoch(),
                            name='Stoch %K',
                            line=dict(color='#2196F3', width=2)
                        ))
                    if show_stoch_d:
                        fig_stoch.add_trace(go.Scatter(
                            x=price_data['time'],
                            y=stoch.stoch_signal(),
                            name='Stoch %D',
                            line=dict(color='#FF9800', width=2)
                        ))
                    fig_stoch.add_hline(y=80, line_dash="dash", line_color="#ef5350")
                    fig_stoch.add_hline(y=20, line_dash="dash", line_color="#26a69a")
                
                # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì Stochastic
                fig_stoch.update_layout(
                    title='Stochastic Oscillator',
                    yaxis_title='Stochastic',
                    xaxis_rangeslider_visible=False,
                    height=400,
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    ),
                    template='plotly_white'
                )
                
                st.plotly_chart(fig_stoch, use_container_width=True)
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu
        st.dataframe(price_data, use_container_width=True)
        
        # N√∫t t·∫£i xu·ªëng
        st.download_button(
            label="T·∫£i xu·ªëng d·ªØ li·ªáu gi√° (CSV)",
            data=price_data.to_csv(index=False).encode('utf-8-sig'),
            file_name=f'Price_{symbol}_{start_str}_to_{end_str}_{interval}.csv',
            mime='text/csv'
        )
    
    else:  # Ph√¢n t√≠ch DCF Monte Carlo
        st.subheader(f"ƒê·ªãnh gi√° DCF Monte Carlo - {symbol}")
        
        # L·∫•y d·ªØ li·ªáu t√†i ch√≠nh
        kqkd = clean_data(stock_data.finance.income_statement(period='year', lang='vi'))
        lctt = clean_data(stock_data.finance.cash_flow(period='year', lang='vi'))
        cdkt = clean_data(stock_data.finance.balance_sheet(period='year', lang='vi'))
        cstc = clean_data(stock_data.finance.ratio(period='year', lang='vi'))
        
        # Chuy·ªÉn ƒë·ªïi c√°c c·ªôt s·ªë t·ª´ string sang numeric
        for df in [kqkd, lctt, cdkt]:
            for col in df.columns:
                if col not in ['Th·ªùi gian', 'Th·ªùi gian b√°o c√°o', 'NƒÉm']:
                    df[col] = pd.to_numeric(df[col].astype(str).str.replace(',', ''), errors='coerce')
        
        # Th√™m c·ªôt NƒÉm v√†o c√°c DataFrame
        for df in [kqkd, lctt, cdkt, cstc]:
            if 'Th·ªùi gian' in df.columns:
                df['NƒÉm'] = pd.to_datetime(df['Th·ªùi gian']).dt.year
            elif 'Th·ªùi gian b√°o c√°o' in df.columns:
                df['NƒÉm'] = pd.to_datetime(df['Th·ªùi gian b√°o c√°o']).dt.year
            elif 'NƒÉm' in df.columns:
                df['NƒÉm'] = df['NƒÉm'].astype(int)
        
        # Kh·ªüi t·∫°o v√† ch·∫°y m√¥ h√¨nh
        model = StockDCFMonteCarlo(
            kqkd_data=kqkd,
            lctt_data=lctt,
            cdkt_data=cdkt,
            cstc_data=cstc,
            wacc=wacc,
            terminal_growth=terminal_growth,
            num_simulations=num_simulations,
            forecast_years=forecast_years
        )
        
        # Ch·∫°y m√¥ ph·ªèng v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        stock_prices, forecast_details_list = model.run_simulation()
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·ªãnh gi√° ngay t·ª´ ƒë·∫ßu
        st.markdown("### K·∫øt Qu·∫£ ƒê·ªãnh Gi√°")
        
        # T√≠nh to√°n th·ªëng k√™ t·ª´ k·∫øt qu·∫£ m√¥ ph·ªèng
        mean_price = np.mean(stock_prices)
        
        # Hi·ªÉn th·ªã gi√° tr·ªã ƒë·ªãnh gi√°
        st.metric(
            label="Gi√° Tr·ªã ƒê∆∞·ª£c ƒê·ªãnh Gi√°",
            value=f"{mean_price:,.0f} VND"
        )
        
        # Hi·ªÉn th·ªã c√°c ph·∫ßn ph√¢n t√≠ch chi ti·∫øt
        st.markdown("### Ph√¢n T√≠ch T·ª∑ L·ªá L·ªãch S·ª≠ (2020-2024)")
        st.dataframe(model.create_historical_ratios_df(), use_container_width=True)
        
        st.markdown(f"### D·ª± B√°o {forecast_years} NƒÉm Chi Ti·∫øt (M√¥ Ph·ªèng ƒê·∫ßu Ti√™n)")
        st.dataframe(model.create_forecast_df(forecast_details_list[0]), use_container_width=True)
        
        st.markdown("### Gi√° Tr·ªã Cu·ªëi C√πng")
        st.dataframe(model.create_final_values_df(forecast_details_list[0]), use_container_width=True)
        
        # Th√™m ph·∫ßn bi·ªÉu ƒë·ªì d·ª± b√°o
        st.markdown("### Bi·ªÉu ƒê·ªì D·ª± B√°o Chi Ti·∫øt")
        
        # T·∫°o danh s√°ch c√°c ch·ªâ s·ªë c√≥ th·ªÉ xem
        forecast_metrics = {
            'Doanh Thu': {
                'value': forecast_details_list[0]['revenues'],
                'growth': forecast_details_list[0]['revenue_growth']
            },
            'EBIT': {
                'value': forecast_details_list[0]['ebit'],
                'growth': forecast_details_list[0]['operating_margins']
            },
            'Thu·∫ø': {
                'value': forecast_details_list[0]['total_tax'],
                'growth': forecast_details_list[0]['tax_rates']
            },
            'Kh·∫•u Hao': {
                'value': forecast_details_list[0]['depreciation'],
                'growth': forecast_details_list[0]['depreciation_rates']
            },
            'Capex': {
                'value': forecast_details_list[0]['capex'],
                'growth': forecast_details_list[0]['capex_rates']
            },
            'Thay ƒê·ªïi NWC': {
                'value': forecast_details_list[0]['nwc_changes'],
                'growth': forecast_details_list[0]['nwc_rates']
            },
            'D√≤ng Ti·ªÅn T·ª± Do': {
                'value': forecast_details_list[0]['fcf'],
                'growth': None
            }
        }
        
        # T·∫°o selectbox ƒë·ªÉ ch·ªçn ch·ªâ s·ªë
        selected_metric = st.selectbox(
            "Ch·ªçn ch·ªâ s·ªë ƒë·ªÉ xem bi·ªÉu ƒë·ªì",
            options=list(forecast_metrics.keys())
        )
        
        # V·∫Ω bi·ªÉu ƒë·ªì cho ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
        if selected_metric:
            fig = go.Figure()
            
            # Th√™m bi·ªÉu ƒë·ªì c·ªôt cho gi√° tr·ªã
            fig.add_trace(go.Bar(
                x=forecast_details_list[0]['years'],
                y=forecast_metrics[selected_metric]['value'],
                name=f"{selected_metric}",
                marker_color='#2196F3'
            ))
            
            # Th√™m bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cho t·ª∑ l·ªá tƒÉng tr∆∞·ªüng (n·∫øu c√≥)
            if forecast_metrics[selected_metric]['growth'] is not None:
                fig.add_trace(go.Scatter(
                    x=forecast_details_list[0]['years'],
                    y=[x * 100 for x in forecast_metrics[selected_metric]['growth']],  # Chuy·ªÉn ƒë·ªïi sang ph·∫ßn trƒÉm
                    name=f"T·ª∑ l·ªá {selected_metric}",
                    line=dict(color='#FF9800', width=2),
                    yaxis='y2'
                ))
            
            # C·∫≠p nh·∫≠t layout
            fig.update_layout(
                title=dict(
                    text=f'D·ª± B√°o {selected_metric} ({forecast_years} NƒÉm)',
                    font=dict(size=16)
                ),
                yaxis=dict(
                    title=dict(
                        text=f"{selected_metric} (VND)",
                        font=dict(color='#2196F3')
                    ),
                    tickfont=dict(color='#2196F3')
                ),
                yaxis2=dict(
                    title=dict(
                        text="T·ª∑ l·ªá (%)",
                        font=dict(color='#FF9800')
                    ),
                    tickfont=dict(color='#FF9800'),
                    overlaying='y',
                    side='right'
                ) if forecast_metrics[selected_metric]['growth'] is not None else None,
                showlegend=True,
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                ),
                height=500,
                template='plotly_white'
            )
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            st.plotly_chart(fig, use_container_width=True)
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n ph·ªëi v√† box plot ·ªü cu·ªëi
        st.markdown("### Ph√¢n Ph·ªëi Gi√° Tr·ªã ƒê·ªãnh Gi√°")
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Bi·ªÉu ƒë·ªì histogram v·ªõi ƒë∆∞·ªùng KDE v√† ƒë∆∞·ªùng trung b√¨nh
        sns.histplot(stock_prices, kde=True, ax=ax1)
        ax1.axvline(np.mean(stock_prices), color='red', linestyle='--', label=f'Mean: {np.mean(stock_prices):,.2f}')
        ax1.axvline(np.median(stock_prices), color='green', linestyle='--', label=f'Median: {np.median(stock_prices):,.2f}')
        ax1.set_title('Ph√¢n Ph·ªëi Gi√° C·ªï Phi·∫øu')
        ax1.set_xlabel('Gi√° C·ªï Phi·∫øu (VND)')
        ax1.set_ylabel('T·∫ßn Su·∫•t')
        ax1.legend()
        
        # Bi·ªÉu ƒë·ªì box plot
        sns.boxplot(y=stock_prices, ax=ax2)
        ax2.set_title('Box Plot Gi√° C·ªï Phi·∫øu')
        ax2.set_ylabel('Gi√° C·ªï Phi·∫øu (VND)')
        
        plt.tight_layout()
        st.pyplot(fig)
        plt.close()
        
        # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ chi ti·∫øt
        st.markdown("### Th·ªëng K√™ Chi Ti·∫øt")
        stats_df = pd.DataFrame({
            'Ch·ªâ s·ªë': [
                'Gi√° tr·ªã trung b√¨nh',
                'Gi√° tr·ªã trung v·ªã',
                'ƒê·ªô l·ªách chu·∫©n',
                'Gi√° tr·ªã th·∫•p nh·∫•t',
                'Gi√° tr·ªã cao nh·∫•t',
                'Ph√¢n v·ªã 25%',
                'Ph√¢n v·ªã 75%',
                'ƒê·ªô xi√™n',
                'ƒê·ªô nh·ªçn'
            ],
            'Gi√° tr·ªã': [
                f"{mean_price:,.0f} VND",
                f"{np.median(stock_prices):,.0f} VND",
                f"{np.std(stock_prices):,.0f} VND",
                f"{np.min(stock_prices):,.0f} VND",
                f"{np.max(stock_prices):,.0f} VND",
                f"{np.percentile(stock_prices, 25):,.0f} VND",
                f"{np.percentile(stock_prices, 75):,.0f} VND",
                f"{stats.skew(stock_prices):.2f}",
                f"{stats.kurtosis(stock_prices):.2f}"
            ]
        })
        st.dataframe(stats_df, hide_index=True)

except Exception as e:
    st.error(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra: {str(e)}")
    st.info("Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu ho·∫∑c th·ª≠ l·∫°i sau.") 